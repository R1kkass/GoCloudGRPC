// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: chat/chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatGreeterClient is the client API for ChatGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatGreeterClient interface {
	CreateChat(ctx context.Context, in *CreateRequestChat, opts ...grpc.CallOption) (*CreateResponseChat, error)
	StreamGetChat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ChatGreeter_StreamGetChatClient, error)
	CreateSecondaryKey(ctx context.Context, in *CreateSecondaryKeyRequest, opts ...grpc.CallOption) (*CreateSecondaryKeyResponse, error)
	GetSecondaryKey(ctx context.Context, in *GetSecondaryKeyRequest, opts ...grpc.CallOption) (*GetSecondaryKeyResponse, error)
	GetPublicKey(ctx context.Context, in *GetPublicKeyRequest, opts ...grpc.CallOption) (*GetPublicKeyResponse, error)
	AcceptChat(ctx context.Context, in *AcceptChatRequest, opts ...grpc.CallOption) (*AcceptChatResponse, error)
	DissalowChat(ctx context.Context, in *DissalowChatRequest, opts ...grpc.CallOption) (*DissalowChatResponse, error)
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error)
	StreamGetMessagesGeneral(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ChatGreeter_StreamGetMessagesGeneralClient, error)
	StreamGetMessages(ctx context.Context, opts ...grpc.CallOption) (ChatGreeter_StreamGetMessagesClient, error)
	GetUnSuccessChats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUnSuccessChatsResponse, error)
	UploadChatFile(ctx context.Context, opts ...grpc.CallOption) (ChatGreeter_UploadChatFileClient, error)
	DownloadChatFile(ctx context.Context, in *DownloadFileChatRequest, opts ...grpc.CallOption) (ChatGreeter_DownloadChatFileClient, error)
	CreateFileMessage(ctx context.Context, in *CreateFileMessageRequest, opts ...grpc.CallOption) (*CreateFileMessageResponse, error)
}

type chatGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewChatGreeterClient(cc grpc.ClientConnInterface) ChatGreeterClient {
	return &chatGreeterClient{cc}
}

func (c *chatGreeterClient) CreateChat(ctx context.Context, in *CreateRequestChat, opts ...grpc.CallOption) (*CreateResponseChat, error) {
	out := new(CreateResponseChat)
	err := c.cc.Invoke(ctx, "/chat.ChatGreeter/CreateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) StreamGetChat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ChatGreeter_StreamGetChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatGreeter_ServiceDesc.Streams[0], "/chat.ChatGreeter/StreamGetChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatGreeterStreamGetChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatGreeter_StreamGetChatClient interface {
	Recv() (*StreamGetResponseChat, error)
	grpc.ClientStream
}

type chatGreeterStreamGetChatClient struct {
	grpc.ClientStream
}

func (x *chatGreeterStreamGetChatClient) Recv() (*StreamGetResponseChat, error) {
	m := new(StreamGetResponseChat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatGreeterClient) CreateSecondaryKey(ctx context.Context, in *CreateSecondaryKeyRequest, opts ...grpc.CallOption) (*CreateSecondaryKeyResponse, error) {
	out := new(CreateSecondaryKeyResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatGreeter/CreateSecondaryKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) GetSecondaryKey(ctx context.Context, in *GetSecondaryKeyRequest, opts ...grpc.CallOption) (*GetSecondaryKeyResponse, error) {
	out := new(GetSecondaryKeyResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatGreeter/GetSecondaryKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) GetPublicKey(ctx context.Context, in *GetPublicKeyRequest, opts ...grpc.CallOption) (*GetPublicKeyResponse, error) {
	out := new(GetPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatGreeter/GetPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) AcceptChat(ctx context.Context, in *AcceptChatRequest, opts ...grpc.CallOption) (*AcceptChatResponse, error) {
	out := new(AcceptChatResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatGreeter/AcceptChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) DissalowChat(ctx context.Context, in *DissalowChatRequest, opts ...grpc.CallOption) (*DissalowChatResponse, error) {
	out := new(DissalowChatResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatGreeter/DissalowChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	out := new(GetMessagesResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatGreeter/GetMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) StreamGetMessagesGeneral(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ChatGreeter_StreamGetMessagesGeneralClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatGreeter_ServiceDesc.Streams[1], "/chat.ChatGreeter/StreamGetMessagesGeneral", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatGreeterStreamGetMessagesGeneralClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatGreeter_StreamGetMessagesGeneralClient interface {
	Recv() (*StreamGetMessagesGeneralResponse, error)
	grpc.ClientStream
}

type chatGreeterStreamGetMessagesGeneralClient struct {
	grpc.ClientStream
}

func (x *chatGreeterStreamGetMessagesGeneralClient) Recv() (*StreamGetMessagesGeneralResponse, error) {
	m := new(StreamGetMessagesGeneralResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatGreeterClient) StreamGetMessages(ctx context.Context, opts ...grpc.CallOption) (ChatGreeter_StreamGetMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatGreeter_ServiceDesc.Streams[2], "/chat.ChatGreeter/StreamGetMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatGreeterStreamGetMessagesClient{stream}
	return x, nil
}

type ChatGreeter_StreamGetMessagesClient interface {
	Send(*StreamGetMessagesRequest) error
	Recv() (*StreamGetMessagesResponse, error)
	grpc.ClientStream
}

type chatGreeterStreamGetMessagesClient struct {
	grpc.ClientStream
}

func (x *chatGreeterStreamGetMessagesClient) Send(m *StreamGetMessagesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatGreeterStreamGetMessagesClient) Recv() (*StreamGetMessagesResponse, error) {
	m := new(StreamGetMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatGreeterClient) GetUnSuccessChats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUnSuccessChatsResponse, error) {
	out := new(GetUnSuccessChatsResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatGreeter/GetUnSuccessChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) UploadChatFile(ctx context.Context, opts ...grpc.CallOption) (ChatGreeter_UploadChatFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatGreeter_ServiceDesc.Streams[3], "/chat.ChatGreeter/UploadChatFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatGreeterUploadChatFileClient{stream}
	return x, nil
}

type ChatGreeter_UploadChatFileClient interface {
	Send(*UploadFileChatRequest) error
	CloseAndRecv() (*UploadFileChatResponse, error)
	grpc.ClientStream
}

type chatGreeterUploadChatFileClient struct {
	grpc.ClientStream
}

func (x *chatGreeterUploadChatFileClient) Send(m *UploadFileChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatGreeterUploadChatFileClient) CloseAndRecv() (*UploadFileChatResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatGreeterClient) DownloadChatFile(ctx context.Context, in *DownloadFileChatRequest, opts ...grpc.CallOption) (ChatGreeter_DownloadChatFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatGreeter_ServiceDesc.Streams[4], "/chat.ChatGreeter/DownloadChatFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatGreeterDownloadChatFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatGreeter_DownloadChatFileClient interface {
	Recv() (*DownloadFileChatResponse, error)
	grpc.ClientStream
}

type chatGreeterDownloadChatFileClient struct {
	grpc.ClientStream
}

func (x *chatGreeterDownloadChatFileClient) Recv() (*DownloadFileChatResponse, error) {
	m := new(DownloadFileChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatGreeterClient) CreateFileMessage(ctx context.Context, in *CreateFileMessageRequest, opts ...grpc.CallOption) (*CreateFileMessageResponse, error) {
	out := new(CreateFileMessageResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatGreeter/CreateFileMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatGreeterServer is the server API for ChatGreeter service.
// All implementations must embed UnimplementedChatGreeterServer
// for forward compatibility
type ChatGreeterServer interface {
	CreateChat(context.Context, *CreateRequestChat) (*CreateResponseChat, error)
	StreamGetChat(*Empty, ChatGreeter_StreamGetChatServer) error
	CreateSecondaryKey(context.Context, *CreateSecondaryKeyRequest) (*CreateSecondaryKeyResponse, error)
	GetSecondaryKey(context.Context, *GetSecondaryKeyRequest) (*GetSecondaryKeyResponse, error)
	GetPublicKey(context.Context, *GetPublicKeyRequest) (*GetPublicKeyResponse, error)
	AcceptChat(context.Context, *AcceptChatRequest) (*AcceptChatResponse, error)
	DissalowChat(context.Context, *DissalowChatRequest) (*DissalowChatResponse, error)
	GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error)
	StreamGetMessagesGeneral(*Empty, ChatGreeter_StreamGetMessagesGeneralServer) error
	StreamGetMessages(ChatGreeter_StreamGetMessagesServer) error
	GetUnSuccessChats(context.Context, *Empty) (*GetUnSuccessChatsResponse, error)
	UploadChatFile(ChatGreeter_UploadChatFileServer) error
	DownloadChatFile(*DownloadFileChatRequest, ChatGreeter_DownloadChatFileServer) error
	CreateFileMessage(context.Context, *CreateFileMessageRequest) (*CreateFileMessageResponse, error)
	mustEmbedUnimplementedChatGreeterServer()
}

// UnimplementedChatGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedChatGreeterServer struct {
}

func (UnimplementedChatGreeterServer) CreateChat(context.Context, *CreateRequestChat) (*CreateResponseChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedChatGreeterServer) StreamGetChat(*Empty, ChatGreeter_StreamGetChatServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGetChat not implemented")
}
func (UnimplementedChatGreeterServer) CreateSecondaryKey(context.Context, *CreateSecondaryKeyRequest) (*CreateSecondaryKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecondaryKey not implemented")
}
func (UnimplementedChatGreeterServer) GetSecondaryKey(context.Context, *GetSecondaryKeyRequest) (*GetSecondaryKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecondaryKey not implemented")
}
func (UnimplementedChatGreeterServer) GetPublicKey(context.Context, *GetPublicKeyRequest) (*GetPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedChatGreeterServer) AcceptChat(context.Context, *AcceptChatRequest) (*AcceptChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptChat not implemented")
}
func (UnimplementedChatGreeterServer) DissalowChat(context.Context, *DissalowChatRequest) (*DissalowChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DissalowChat not implemented")
}
func (UnimplementedChatGreeterServer) GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedChatGreeterServer) StreamGetMessagesGeneral(*Empty, ChatGreeter_StreamGetMessagesGeneralServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGetMessagesGeneral not implemented")
}
func (UnimplementedChatGreeterServer) StreamGetMessages(ChatGreeter_StreamGetMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGetMessages not implemented")
}
func (UnimplementedChatGreeterServer) GetUnSuccessChats(context.Context, *Empty) (*GetUnSuccessChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnSuccessChats not implemented")
}
func (UnimplementedChatGreeterServer) UploadChatFile(ChatGreeter_UploadChatFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadChatFile not implemented")
}
func (UnimplementedChatGreeterServer) DownloadChatFile(*DownloadFileChatRequest, ChatGreeter_DownloadChatFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadChatFile not implemented")
}
func (UnimplementedChatGreeterServer) CreateFileMessage(context.Context, *CreateFileMessageRequest) (*CreateFileMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFileMessage not implemented")
}
func (UnimplementedChatGreeterServer) mustEmbedUnimplementedChatGreeterServer() {}

// UnsafeChatGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatGreeterServer will
// result in compilation errors.
type UnsafeChatGreeterServer interface {
	mustEmbedUnimplementedChatGreeterServer()
}

func RegisterChatGreeterServer(s grpc.ServiceRegistrar, srv ChatGreeterServer) {
	s.RegisterService(&ChatGreeter_ServiceDesc, srv)
}

func _ChatGreeter_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequestChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGreeter/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).CreateChat(ctx, req.(*CreateRequestChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_StreamGetChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatGreeterServer).StreamGetChat(m, &chatGreeterStreamGetChatServer{stream})
}

type ChatGreeter_StreamGetChatServer interface {
	Send(*StreamGetResponseChat) error
	grpc.ServerStream
}

type chatGreeterStreamGetChatServer struct {
	grpc.ServerStream
}

func (x *chatGreeterStreamGetChatServer) Send(m *StreamGetResponseChat) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatGreeter_CreateSecondaryKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecondaryKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).CreateSecondaryKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGreeter/CreateSecondaryKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).CreateSecondaryKey(ctx, req.(*CreateSecondaryKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_GetSecondaryKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecondaryKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).GetSecondaryKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGreeter/GetSecondaryKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).GetSecondaryKey(ctx, req.(*GetSecondaryKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGreeter/GetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).GetPublicKey(ctx, req.(*GetPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_AcceptChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).AcceptChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGreeter/AcceptChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).AcceptChat(ctx, req.(*AcceptChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_DissalowChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DissalowChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).DissalowChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGreeter/DissalowChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).DissalowChat(ctx, req.(*DissalowChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGreeter/GetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).GetMessages(ctx, req.(*GetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_StreamGetMessagesGeneral_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatGreeterServer).StreamGetMessagesGeneral(m, &chatGreeterStreamGetMessagesGeneralServer{stream})
}

type ChatGreeter_StreamGetMessagesGeneralServer interface {
	Send(*StreamGetMessagesGeneralResponse) error
	grpc.ServerStream
}

type chatGreeterStreamGetMessagesGeneralServer struct {
	grpc.ServerStream
}

func (x *chatGreeterStreamGetMessagesGeneralServer) Send(m *StreamGetMessagesGeneralResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatGreeter_StreamGetMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatGreeterServer).StreamGetMessages(&chatGreeterStreamGetMessagesServer{stream})
}

type ChatGreeter_StreamGetMessagesServer interface {
	Send(*StreamGetMessagesResponse) error
	Recv() (*StreamGetMessagesRequest, error)
	grpc.ServerStream
}

type chatGreeterStreamGetMessagesServer struct {
	grpc.ServerStream
}

func (x *chatGreeterStreamGetMessagesServer) Send(m *StreamGetMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatGreeterStreamGetMessagesServer) Recv() (*StreamGetMessagesRequest, error) {
	m := new(StreamGetMessagesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatGreeter_GetUnSuccessChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).GetUnSuccessChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGreeter/GetUnSuccessChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).GetUnSuccessChats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_UploadChatFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatGreeterServer).UploadChatFile(&chatGreeterUploadChatFileServer{stream})
}

type ChatGreeter_UploadChatFileServer interface {
	SendAndClose(*UploadFileChatResponse) error
	Recv() (*UploadFileChatRequest, error)
	grpc.ServerStream
}

type chatGreeterUploadChatFileServer struct {
	grpc.ServerStream
}

func (x *chatGreeterUploadChatFileServer) SendAndClose(m *UploadFileChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatGreeterUploadChatFileServer) Recv() (*UploadFileChatRequest, error) {
	m := new(UploadFileChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatGreeter_DownloadChatFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatGreeterServer).DownloadChatFile(m, &chatGreeterDownloadChatFileServer{stream})
}

type ChatGreeter_DownloadChatFileServer interface {
	Send(*DownloadFileChatResponse) error
	grpc.ServerStream
}

type chatGreeterDownloadChatFileServer struct {
	grpc.ServerStream
}

func (x *chatGreeterDownloadChatFileServer) Send(m *DownloadFileChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatGreeter_CreateFileMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).CreateFileMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGreeter/CreateFileMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).CreateFileMessage(ctx, req.(*CreateFileMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatGreeter_ServiceDesc is the grpc.ServiceDesc for ChatGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatGreeter",
	HandlerType: (*ChatGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChat",
			Handler:    _ChatGreeter_CreateChat_Handler,
		},
		{
			MethodName: "CreateSecondaryKey",
			Handler:    _ChatGreeter_CreateSecondaryKey_Handler,
		},
		{
			MethodName: "GetSecondaryKey",
			Handler:    _ChatGreeter_GetSecondaryKey_Handler,
		},
		{
			MethodName: "GetPublicKey",
			Handler:    _ChatGreeter_GetPublicKey_Handler,
		},
		{
			MethodName: "AcceptChat",
			Handler:    _ChatGreeter_AcceptChat_Handler,
		},
		{
			MethodName: "DissalowChat",
			Handler:    _ChatGreeter_DissalowChat_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _ChatGreeter_GetMessages_Handler,
		},
		{
			MethodName: "GetUnSuccessChats",
			Handler:    _ChatGreeter_GetUnSuccessChats_Handler,
		},
		{
			MethodName: "CreateFileMessage",
			Handler:    _ChatGreeter_CreateFileMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGetChat",
			Handler:       _ChatGreeter_StreamGetChat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamGetMessagesGeneral",
			Handler:       _ChatGreeter_StreamGetMessagesGeneral_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamGetMessages",
			Handler:       _ChatGreeter_StreamGetMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadChatFile",
			Handler:       _ChatGreeter_UploadChatFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadChatFile",
			Handler:       _ChatGreeter_DownloadChatFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat/chat.proto",
}
