// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: chat/chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChatGreeter_CreateChat_FullMethodName               = "/chat.ChatGreeter/CreateChat"
	ChatGreeter_StreamGetChat_FullMethodName            = "/chat.ChatGreeter/StreamGetChat"
	ChatGreeter_CreateSecondaryKey_FullMethodName       = "/chat.ChatGreeter/CreateSecondaryKey"
	ChatGreeter_GetSecondaryKey_FullMethodName          = "/chat.ChatGreeter/GetSecondaryKey"
	ChatGreeter_GetPublicKey_FullMethodName             = "/chat.ChatGreeter/GetPublicKey"
	ChatGreeter_AcceptChat_FullMethodName               = "/chat.ChatGreeter/AcceptChat"
	ChatGreeter_DissalowChat_FullMethodName             = "/chat.ChatGreeter/DissalowChat"
	ChatGreeter_GetMessages_FullMethodName              = "/chat.ChatGreeter/GetMessages"
	ChatGreeter_StreamGetMessagesGeneral_FullMethodName = "/chat.ChatGreeter/StreamGetMessagesGeneral"
	ChatGreeter_StreamGetMessages_FullMethodName        = "/chat.ChatGreeter/StreamGetMessages"
	ChatGreeter_GetUnSuccessChats_FullMethodName        = "/chat.ChatGreeter/GetUnSuccessChats"
	ChatGreeter_UploadChatFile_FullMethodName           = "/chat.ChatGreeter/UploadChatFile"
	ChatGreeter_DownloadChatFile_FullMethodName         = "/chat.ChatGreeter/DownloadChatFile"
)

// ChatGreeterClient is the client API for ChatGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatGreeterClient interface {
	CreateChat(ctx context.Context, in *CreateRequestChat, opts ...grpc.CallOption) (*CreateResponseChat, error)
	StreamGetChat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamGetResponseChat], error)
	CreateSecondaryKey(ctx context.Context, in *CreateSecondaryKeyRequest, opts ...grpc.CallOption) (*CreateSecondaryKeyResponse, error)
	GetSecondaryKey(ctx context.Context, in *GetSecondaryKeyRequest, opts ...grpc.CallOption) (*GetSecondaryKeyResponse, error)
	GetPublicKey(ctx context.Context, in *GetPublicKeyRequest, opts ...grpc.CallOption) (*GetPublicKeyResponse, error)
	AcceptChat(ctx context.Context, in *AcceptChatRequest, opts ...grpc.CallOption) (*AcceptChatResponse, error)
	DissalowChat(ctx context.Context, in *DissalowChatRequest, opts ...grpc.CallOption) (*DissalowChatResponse, error)
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error)
	StreamGetMessagesGeneral(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamGetMessagesGeneralResponse], error)
	StreamGetMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamGetMessagesRequest, StreamGetMessagesResponse], error)
	GetUnSuccessChats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUnSuccessChatsResponse, error)
	UploadChatFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileChat, Empty], error)
	DownloadChatFile(ctx context.Context, in *DownloadFileChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileChatResponse], error)
}

type chatGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewChatGreeterClient(cc grpc.ClientConnInterface) ChatGreeterClient {
	return &chatGreeterClient{cc}
}

func (c *chatGreeterClient) CreateChat(ctx context.Context, in *CreateRequestChat, opts ...grpc.CallOption) (*CreateResponseChat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponseChat)
	err := c.cc.Invoke(ctx, ChatGreeter_CreateChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) StreamGetChat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamGetResponseChat], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatGreeter_ServiceDesc.Streams[0], ChatGreeter_StreamGetChat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, StreamGetResponseChat]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatGreeter_StreamGetChatClient = grpc.ServerStreamingClient[StreamGetResponseChat]

func (c *chatGreeterClient) CreateSecondaryKey(ctx context.Context, in *CreateSecondaryKeyRequest, opts ...grpc.CallOption) (*CreateSecondaryKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSecondaryKeyResponse)
	err := c.cc.Invoke(ctx, ChatGreeter_CreateSecondaryKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) GetSecondaryKey(ctx context.Context, in *GetSecondaryKeyRequest, opts ...grpc.CallOption) (*GetSecondaryKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecondaryKeyResponse)
	err := c.cc.Invoke(ctx, ChatGreeter_GetSecondaryKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) GetPublicKey(ctx context.Context, in *GetPublicKeyRequest, opts ...grpc.CallOption) (*GetPublicKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublicKeyResponse)
	err := c.cc.Invoke(ctx, ChatGreeter_GetPublicKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) AcceptChat(ctx context.Context, in *AcceptChatRequest, opts ...grpc.CallOption) (*AcceptChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptChatResponse)
	err := c.cc.Invoke(ctx, ChatGreeter_AcceptChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) DissalowChat(ctx context.Context, in *DissalowChatRequest, opts ...grpc.CallOption) (*DissalowChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DissalowChatResponse)
	err := c.cc.Invoke(ctx, ChatGreeter_DissalowChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessagesResponse)
	err := c.cc.Invoke(ctx, ChatGreeter_GetMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) StreamGetMessagesGeneral(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamGetMessagesGeneralResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatGreeter_ServiceDesc.Streams[1], ChatGreeter_StreamGetMessagesGeneral_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, StreamGetMessagesGeneralResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatGreeter_StreamGetMessagesGeneralClient = grpc.ServerStreamingClient[StreamGetMessagesGeneralResponse]

func (c *chatGreeterClient) StreamGetMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamGetMessagesRequest, StreamGetMessagesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatGreeter_ServiceDesc.Streams[2], ChatGreeter_StreamGetMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamGetMessagesRequest, StreamGetMessagesResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatGreeter_StreamGetMessagesClient = grpc.BidiStreamingClient[StreamGetMessagesRequest, StreamGetMessagesResponse]

func (c *chatGreeterClient) GetUnSuccessChats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUnSuccessChatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnSuccessChatsResponse)
	err := c.cc.Invoke(ctx, ChatGreeter_GetUnSuccessChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) UploadChatFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileChat, Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatGreeter_ServiceDesc.Streams[3], ChatGreeter_UploadChatFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadFileChat, Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatGreeter_UploadChatFileClient = grpc.ClientStreamingClient[UploadFileChat, Empty]

func (c *chatGreeterClient) DownloadChatFile(ctx context.Context, in *DownloadFileChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileChatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatGreeter_ServiceDesc.Streams[4], ChatGreeter_DownloadChatFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadFileChatRequest, DownloadFileChatResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatGreeter_DownloadChatFileClient = grpc.ServerStreamingClient[DownloadFileChatResponse]

// ChatGreeterServer is the server API for ChatGreeter service.
// All implementations must embed UnimplementedChatGreeterServer
// for forward compatibility.
type ChatGreeterServer interface {
	CreateChat(context.Context, *CreateRequestChat) (*CreateResponseChat, error)
	StreamGetChat(*Empty, grpc.ServerStreamingServer[StreamGetResponseChat]) error
	CreateSecondaryKey(context.Context, *CreateSecondaryKeyRequest) (*CreateSecondaryKeyResponse, error)
	GetSecondaryKey(context.Context, *GetSecondaryKeyRequest) (*GetSecondaryKeyResponse, error)
	GetPublicKey(context.Context, *GetPublicKeyRequest) (*GetPublicKeyResponse, error)
	AcceptChat(context.Context, *AcceptChatRequest) (*AcceptChatResponse, error)
	DissalowChat(context.Context, *DissalowChatRequest) (*DissalowChatResponse, error)
	GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error)
	StreamGetMessagesGeneral(*Empty, grpc.ServerStreamingServer[StreamGetMessagesGeneralResponse]) error
	StreamGetMessages(grpc.BidiStreamingServer[StreamGetMessagesRequest, StreamGetMessagesResponse]) error
	GetUnSuccessChats(context.Context, *Empty) (*GetUnSuccessChatsResponse, error)
	UploadChatFile(grpc.ClientStreamingServer[UploadFileChat, Empty]) error
	DownloadChatFile(*DownloadFileChatRequest, grpc.ServerStreamingServer[DownloadFileChatResponse]) error
	mustEmbedUnimplementedChatGreeterServer()
}

// UnimplementedChatGreeterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatGreeterServer struct{}

func (UnimplementedChatGreeterServer) CreateChat(context.Context, *CreateRequestChat) (*CreateResponseChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedChatGreeterServer) StreamGetChat(*Empty, grpc.ServerStreamingServer[StreamGetResponseChat]) error {
	return status.Errorf(codes.Unimplemented, "method StreamGetChat not implemented")
}
func (UnimplementedChatGreeterServer) CreateSecondaryKey(context.Context, *CreateSecondaryKeyRequest) (*CreateSecondaryKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecondaryKey not implemented")
}
func (UnimplementedChatGreeterServer) GetSecondaryKey(context.Context, *GetSecondaryKeyRequest) (*GetSecondaryKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecondaryKey not implemented")
}
func (UnimplementedChatGreeterServer) GetPublicKey(context.Context, *GetPublicKeyRequest) (*GetPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedChatGreeterServer) AcceptChat(context.Context, *AcceptChatRequest) (*AcceptChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptChat not implemented")
}
func (UnimplementedChatGreeterServer) DissalowChat(context.Context, *DissalowChatRequest) (*DissalowChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DissalowChat not implemented")
}
func (UnimplementedChatGreeterServer) GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedChatGreeterServer) StreamGetMessagesGeneral(*Empty, grpc.ServerStreamingServer[StreamGetMessagesGeneralResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamGetMessagesGeneral not implemented")
}
func (UnimplementedChatGreeterServer) StreamGetMessages(grpc.BidiStreamingServer[StreamGetMessagesRequest, StreamGetMessagesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamGetMessages not implemented")
}
func (UnimplementedChatGreeterServer) GetUnSuccessChats(context.Context, *Empty) (*GetUnSuccessChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnSuccessChats not implemented")
}
func (UnimplementedChatGreeterServer) UploadChatFile(grpc.ClientStreamingServer[UploadFileChat, Empty]) error {
	return status.Errorf(codes.Unimplemented, "method UploadChatFile not implemented")
}
func (UnimplementedChatGreeterServer) DownloadChatFile(*DownloadFileChatRequest, grpc.ServerStreamingServer[DownloadFileChatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadChatFile not implemented")
}
func (UnimplementedChatGreeterServer) mustEmbedUnimplementedChatGreeterServer() {}
func (UnimplementedChatGreeterServer) testEmbeddedByValue()                     {}

// UnsafeChatGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatGreeterServer will
// result in compilation errors.
type UnsafeChatGreeterServer interface {
	mustEmbedUnimplementedChatGreeterServer()
}

func RegisterChatGreeterServer(s grpc.ServiceRegistrar, srv ChatGreeterServer) {
	// If the following call pancis, it indicates UnimplementedChatGreeterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatGreeter_ServiceDesc, srv)
}

func _ChatGreeter_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequestChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatGreeter_CreateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).CreateChat(ctx, req.(*CreateRequestChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_StreamGetChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatGreeterServer).StreamGetChat(m, &grpc.GenericServerStream[Empty, StreamGetResponseChat]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatGreeter_StreamGetChatServer = grpc.ServerStreamingServer[StreamGetResponseChat]

func _ChatGreeter_CreateSecondaryKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecondaryKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).CreateSecondaryKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatGreeter_CreateSecondaryKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).CreateSecondaryKey(ctx, req.(*CreateSecondaryKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_GetSecondaryKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecondaryKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).GetSecondaryKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatGreeter_GetSecondaryKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).GetSecondaryKey(ctx, req.(*GetSecondaryKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatGreeter_GetPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).GetPublicKey(ctx, req.(*GetPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_AcceptChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).AcceptChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatGreeter_AcceptChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).AcceptChat(ctx, req.(*AcceptChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_DissalowChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DissalowChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).DissalowChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatGreeter_DissalowChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).DissalowChat(ctx, req.(*DissalowChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatGreeter_GetMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).GetMessages(ctx, req.(*GetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_StreamGetMessagesGeneral_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatGreeterServer).StreamGetMessagesGeneral(m, &grpc.GenericServerStream[Empty, StreamGetMessagesGeneralResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatGreeter_StreamGetMessagesGeneralServer = grpc.ServerStreamingServer[StreamGetMessagesGeneralResponse]

func _ChatGreeter_StreamGetMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatGreeterServer).StreamGetMessages(&grpc.GenericServerStream[StreamGetMessagesRequest, StreamGetMessagesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatGreeter_StreamGetMessagesServer = grpc.BidiStreamingServer[StreamGetMessagesRequest, StreamGetMessagesResponse]

func _ChatGreeter_GetUnSuccessChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).GetUnSuccessChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatGreeter_GetUnSuccessChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).GetUnSuccessChats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_UploadChatFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatGreeterServer).UploadChatFile(&grpc.GenericServerStream[UploadFileChat, Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatGreeter_UploadChatFileServer = grpc.ClientStreamingServer[UploadFileChat, Empty]

func _ChatGreeter_DownloadChatFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatGreeterServer).DownloadChatFile(m, &grpc.GenericServerStream[DownloadFileChatRequest, DownloadFileChatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatGreeter_DownloadChatFileServer = grpc.ServerStreamingServer[DownloadFileChatResponse]

// ChatGreeter_ServiceDesc is the grpc.ServiceDesc for ChatGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatGreeter",
	HandlerType: (*ChatGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChat",
			Handler:    _ChatGreeter_CreateChat_Handler,
		},
		{
			MethodName: "CreateSecondaryKey",
			Handler:    _ChatGreeter_CreateSecondaryKey_Handler,
		},
		{
			MethodName: "GetSecondaryKey",
			Handler:    _ChatGreeter_GetSecondaryKey_Handler,
		},
		{
			MethodName: "GetPublicKey",
			Handler:    _ChatGreeter_GetPublicKey_Handler,
		},
		{
			MethodName: "AcceptChat",
			Handler:    _ChatGreeter_AcceptChat_Handler,
		},
		{
			MethodName: "DissalowChat",
			Handler:    _ChatGreeter_DissalowChat_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _ChatGreeter_GetMessages_Handler,
		},
		{
			MethodName: "GetUnSuccessChats",
			Handler:    _ChatGreeter_GetUnSuccessChats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGetChat",
			Handler:       _ChatGreeter_StreamGetChat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamGetMessagesGeneral",
			Handler:       _ChatGreeter_StreamGetMessagesGeneral_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamGetMessages",
			Handler:       _ChatGreeter_StreamGetMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadChatFile",
			Handler:       _ChatGreeter_UploadChatFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadChatFile",
			Handler:       _ChatGreeter_DownloadChatFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat/chat.proto",
}
