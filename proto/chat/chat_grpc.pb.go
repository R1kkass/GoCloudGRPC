// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatGreeterClient is the client API for ChatGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatGreeterClient interface {
	CreateChat(ctx context.Context, in *CreateRequestChat, opts ...grpc.CallOption) (*CreateResponseChat, error)
	GetChat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetResponseChat, error)
	CreateSecondaryKey(ctx context.Context, in *CreateSecondaryKeyRequest, opts ...grpc.CallOption) (*CreateSecondaryKeyResponse, error)
	GetSecondaryKey(ctx context.Context, in *GetSecondaryKeyRequest, opts ...grpc.CallOption) (*GetSecondaryKeyResponse, error)
	GetPublicKey(ctx context.Context, in *GetPublicKeyRequest, opts ...grpc.CallOption) (*GetPublicKeyResponse, error)
}

type chatGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewChatGreeterClient(cc grpc.ClientConnInterface) ChatGreeterClient {
	return &chatGreeterClient{cc}
}

func (c *chatGreeterClient) CreateChat(ctx context.Context, in *CreateRequestChat, opts ...grpc.CallOption) (*CreateResponseChat, error) {
	out := new(CreateResponseChat)
	err := c.cc.Invoke(ctx, "/chat.ChatGreeter/CreateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) GetChat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetResponseChat, error) {
	out := new(GetResponseChat)
	err := c.cc.Invoke(ctx, "/chat.ChatGreeter/GetChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) CreateSecondaryKey(ctx context.Context, in *CreateSecondaryKeyRequest, opts ...grpc.CallOption) (*CreateSecondaryKeyResponse, error) {
	out := new(CreateSecondaryKeyResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatGreeter/CreateSecondaryKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) GetSecondaryKey(ctx context.Context, in *GetSecondaryKeyRequest, opts ...grpc.CallOption) (*GetSecondaryKeyResponse, error) {
	out := new(GetSecondaryKeyResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatGreeter/GetSecondaryKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGreeterClient) GetPublicKey(ctx context.Context, in *GetPublicKeyRequest, opts ...grpc.CallOption) (*GetPublicKeyResponse, error) {
	out := new(GetPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatGreeter/GetPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatGreeterServer is the server API for ChatGreeter service.
// All implementations must embed UnimplementedChatGreeterServer
// for forward compatibility
type ChatGreeterServer interface {
	CreateChat(context.Context, *CreateRequestChat) (*CreateResponseChat, error)
	GetChat(context.Context, *Empty) (*GetResponseChat, error)
	CreateSecondaryKey(context.Context, *CreateSecondaryKeyRequest) (*CreateSecondaryKeyResponse, error)
	GetSecondaryKey(context.Context, *GetSecondaryKeyRequest) (*GetSecondaryKeyResponse, error)
	GetPublicKey(context.Context, *GetPublicKeyRequest) (*GetPublicKeyResponse, error)
	mustEmbedUnimplementedChatGreeterServer()
}

// UnimplementedChatGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedChatGreeterServer struct {
}

func (UnimplementedChatGreeterServer) CreateChat(context.Context, *CreateRequestChat) (*CreateResponseChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedChatGreeterServer) GetChat(context.Context, *Empty) (*GetResponseChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChat not implemented")
}
func (UnimplementedChatGreeterServer) CreateSecondaryKey(context.Context, *CreateSecondaryKeyRequest) (*CreateSecondaryKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecondaryKey not implemented")
}
func (UnimplementedChatGreeterServer) GetSecondaryKey(context.Context, *GetSecondaryKeyRequest) (*GetSecondaryKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecondaryKey not implemented")
}
func (UnimplementedChatGreeterServer) GetPublicKey(context.Context, *GetPublicKeyRequest) (*GetPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedChatGreeterServer) mustEmbedUnimplementedChatGreeterServer() {}

// UnsafeChatGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatGreeterServer will
// result in compilation errors.
type UnsafeChatGreeterServer interface {
	mustEmbedUnimplementedChatGreeterServer()
}

func RegisterChatGreeterServer(s grpc.ServiceRegistrar, srv ChatGreeterServer) {
	s.RegisterService(&ChatGreeter_ServiceDesc, srv)
}

func _ChatGreeter_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequestChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGreeter/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).CreateChat(ctx, req.(*CreateRequestChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGreeter/GetChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).GetChat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_CreateSecondaryKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecondaryKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).CreateSecondaryKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGreeter/CreateSecondaryKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).CreateSecondaryKey(ctx, req.(*CreateSecondaryKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_GetSecondaryKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecondaryKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).GetSecondaryKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGreeter/GetSecondaryKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).GetSecondaryKey(ctx, req.(*GetSecondaryKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGreeter_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGreeterServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGreeter/GetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGreeterServer).GetPublicKey(ctx, req.(*GetPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatGreeter_ServiceDesc is the grpc.ServiceDesc for ChatGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatGreeter",
	HandlerType: (*ChatGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChat",
			Handler:    _ChatGreeter_CreateChat_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _ChatGreeter_GetChat_Handler,
		},
		{
			MethodName: "CreateSecondaryKey",
			Handler:    _ChatGreeter_CreateSecondaryKey_Handler,
		},
		{
			MethodName: "GetSecondaryKey",
			Handler:    _ChatGreeter_GetSecondaryKey_Handler,
		},
		{
			MethodName: "GetPublicKey",
			Handler:    _ChatGreeter_GetPublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
