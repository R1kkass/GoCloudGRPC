// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: auth/auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthGreet_Login_FullMethodName           = "/auth.AuthGreet/Login"
	AuthGreet_Registration_FullMethodName    = "/auth.AuthGreet/Registration"
	AuthGreet_DHConnect_FullMethodName       = "/auth.AuthGreet/DHConnect"
	AuthGreet_DHSecondConnect_FullMethodName = "/auth.AuthGreet/DHSecondConnect"
	AuthGreet_CheckAuth_FullMethodName       = "/auth.AuthGreet/CheckAuth"
)

// AuthGreetClient is the client API for AuthGreet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthGreetClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
	DHConnect(ctx context.Context, in *DHConnectRequest, opts ...grpc.CallOption) (*DHConnectResponse, error)
	DHSecondConnect(ctx context.Context, in *DHSecondConnectRequest, opts ...grpc.CallOption) (*DHSecondConnectResponse, error)
	CheckAuth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type authGreetClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthGreetClient(cc grpc.ClientConnInterface) AuthGreetClient {
	return &authGreetClient{cc}
}

func (c *authGreetClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AuthGreet_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGreetClient) Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, AuthGreet_Registration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGreetClient) DHConnect(ctx context.Context, in *DHConnectRequest, opts ...grpc.CallOption) (*DHConnectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DHConnectResponse)
	err := c.cc.Invoke(ctx, AuthGreet_DHConnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGreetClient) DHSecondConnect(ctx context.Context, in *DHSecondConnectRequest, opts ...grpc.CallOption) (*DHSecondConnectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DHSecondConnectResponse)
	err := c.cc.Invoke(ctx, AuthGreet_DHSecondConnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGreetClient) CheckAuth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AuthGreet_CheckAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthGreetServer is the server API for AuthGreet service.
// All implementations must embed UnimplementedAuthGreetServer
// for forward compatibility.
type AuthGreetServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Registration(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
	DHConnect(context.Context, *DHConnectRequest) (*DHConnectResponse, error)
	DHSecondConnect(context.Context, *DHSecondConnectRequest) (*DHSecondConnectResponse, error)
	CheckAuth(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedAuthGreetServer()
}

// UnimplementedAuthGreetServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthGreetServer struct{}

func (UnimplementedAuthGreetServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthGreetServer) Registration(context.Context, *RegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (UnimplementedAuthGreetServer) DHConnect(context.Context, *DHConnectRequest) (*DHConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHConnect not implemented")
}
func (UnimplementedAuthGreetServer) DHSecondConnect(context.Context, *DHSecondConnectRequest) (*DHSecondConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHSecondConnect not implemented")
}
func (UnimplementedAuthGreetServer) CheckAuth(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuth not implemented")
}
func (UnimplementedAuthGreetServer) mustEmbedUnimplementedAuthGreetServer() {}
func (UnimplementedAuthGreetServer) testEmbeddedByValue()                   {}

// UnsafeAuthGreetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthGreetServer will
// result in compilation errors.
type UnsafeAuthGreetServer interface {
	mustEmbedUnimplementedAuthGreetServer()
}

func RegisterAuthGreetServer(s grpc.ServiceRegistrar, srv AuthGreetServer) {
	// If the following call pancis, it indicates UnimplementedAuthGreetServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthGreet_ServiceDesc, srv)
}

func _AuthGreet_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGreetServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthGreet_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGreetServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGreet_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGreetServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthGreet_Registration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGreetServer).Registration(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGreet_DHConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGreetServer).DHConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthGreet_DHConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGreetServer).DHConnect(ctx, req.(*DHConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGreet_DHSecondConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHSecondConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGreetServer).DHSecondConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthGreet_DHSecondConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGreetServer).DHSecondConnect(ctx, req.(*DHSecondConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGreet_CheckAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGreetServer).CheckAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthGreet_CheckAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGreetServer).CheckAuth(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthGreet_ServiceDesc is the grpc.ServiceDesc for AuthGreet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthGreet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthGreet",
	HandlerType: (*AuthGreetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthGreet_Login_Handler,
		},
		{
			MethodName: "Registration",
			Handler:    _AuthGreet_Registration_Handler,
		},
		{
			MethodName: "DHConnect",
			Handler:    _AuthGreet_DHConnect_Handler,
		},
		{
			MethodName: "DHSecondConnect",
			Handler:    _AuthGreet_DHSecondConnect_Handler,
		},
		{
			MethodName: "CheckAuth",
			Handler:    _AuthGreet_CheckAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}
