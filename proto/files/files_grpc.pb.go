// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: files/files.proto

package files

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilesGreeterClient is the client API for FilesGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesGreeterClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FilesGreeter_UploadFileClient, error)
	DownloadFile(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (FilesGreeter_DownloadFileClient, error)
	FindFile(ctx context.Context, in *FindFileRequest, opts ...grpc.CallOption) (*FindFileResponse, error)
}

type filesGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesGreeterClient(cc grpc.ClientConnInterface) FilesGreeterClient {
	return &filesGreeterClient{cc}
}

func (c *filesGreeterClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FilesGreeter_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FilesGreeter_ServiceDesc.Streams[0], "/files.FilesGreeter/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesGreeterUploadFileClient{stream}
	return x, nil
}

type FilesGreeter_UploadFileClient interface {
	Send(*FileUploadRequest) error
	CloseAndRecv() (*FileUploadResponse, error)
	grpc.ClientStream
}

type filesGreeterUploadFileClient struct {
	grpc.ClientStream
}

func (x *filesGreeterUploadFileClient) Send(m *FileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filesGreeterUploadFileClient) CloseAndRecv() (*FileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesGreeterClient) DownloadFile(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (FilesGreeter_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FilesGreeter_ServiceDesc.Streams[1], "/files.FilesGreeter/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesGreeterDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FilesGreeter_DownloadFileClient interface {
	Recv() (*FileDownloadResponse, error)
	grpc.ClientStream
}

type filesGreeterDownloadFileClient struct {
	grpc.ClientStream
}

func (x *filesGreeterDownloadFileClient) Recv() (*FileDownloadResponse, error) {
	m := new(FileDownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesGreeterClient) FindFile(ctx context.Context, in *FindFileRequest, opts ...grpc.CallOption) (*FindFileResponse, error) {
	out := new(FindFileResponse)
	err := c.cc.Invoke(ctx, "/files.FilesGreeter/FindFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesGreeterServer is the server API for FilesGreeter service.
// All implementations must embed UnimplementedFilesGreeterServer
// for forward compatibility
type FilesGreeterServer interface {
	UploadFile(FilesGreeter_UploadFileServer) error
	DownloadFile(*FileDownloadRequest, FilesGreeter_DownloadFileServer) error
	FindFile(context.Context, *FindFileRequest) (*FindFileResponse, error)
	mustEmbedUnimplementedFilesGreeterServer()
}

// UnimplementedFilesGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedFilesGreeterServer struct {
}

func (UnimplementedFilesGreeterServer) UploadFile(FilesGreeter_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFilesGreeterServer) DownloadFile(*FileDownloadRequest, FilesGreeter_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFilesGreeterServer) FindFile(context.Context, *FindFileRequest) (*FindFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFile not implemented")
}
func (UnimplementedFilesGreeterServer) mustEmbedUnimplementedFilesGreeterServer() {}

// UnsafeFilesGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesGreeterServer will
// result in compilation errors.
type UnsafeFilesGreeterServer interface {
	mustEmbedUnimplementedFilesGreeterServer()
}

func RegisterFilesGreeterServer(s grpc.ServiceRegistrar, srv FilesGreeterServer) {
	s.RegisterService(&FilesGreeter_ServiceDesc, srv)
}

func _FilesGreeter_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesGreeterServer).UploadFile(&filesGreeterUploadFileServer{stream})
}

type FilesGreeter_UploadFileServer interface {
	SendAndClose(*FileUploadResponse) error
	Recv() (*FileUploadRequest, error)
	grpc.ServerStream
}

type filesGreeterUploadFileServer struct {
	grpc.ServerStream
}

func (x *filesGreeterUploadFileServer) SendAndClose(m *FileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filesGreeterUploadFileServer) Recv() (*FileUploadRequest, error) {
	m := new(FileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FilesGreeter_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesGreeterServer).DownloadFile(m, &filesGreeterDownloadFileServer{stream})
}

type FilesGreeter_DownloadFileServer interface {
	Send(*FileDownloadResponse) error
	grpc.ServerStream
}

type filesGreeterDownloadFileServer struct {
	grpc.ServerStream
}

func (x *filesGreeterDownloadFileServer) Send(m *FileDownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FilesGreeter_FindFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesGreeterServer).FindFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesGreeter/FindFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesGreeterServer).FindFile(ctx, req.(*FindFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesGreeter_ServiceDesc is the grpc.ServiceDesc for FilesGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "files.FilesGreeter",
	HandlerType: (*FilesGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindFile",
			Handler:    _FilesGreeter_FindFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FilesGreeter_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _FilesGreeter_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "files/files.proto",
}
