// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: access.proto

package access

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccessGreeterClient is the client API for AccessGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessGreeterClient interface {
	CreateAccess(ctx context.Context, in *RequestAccess, opts ...grpc.CallOption) (*ResponseAccess, error)
	GetAccesses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAccessesResponse, error)
	ChangeAccess(ctx context.Context, in *ChangeAccessRequest, opts ...grpc.CallOption) (*ChangeAccessResponse, error)
}

type accessGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessGreeterClient(cc grpc.ClientConnInterface) AccessGreeterClient {
	return &accessGreeterClient{cc}
}

func (c *accessGreeterClient) CreateAccess(ctx context.Context, in *RequestAccess, opts ...grpc.CallOption) (*ResponseAccess, error) {
	out := new(ResponseAccess)
	err := c.cc.Invoke(ctx, "/access.AccessGreeter/CreateAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessGreeterClient) GetAccesses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAccessesResponse, error) {
	out := new(GetAccessesResponse)
	err := c.cc.Invoke(ctx, "/access.AccessGreeter/GetAccesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessGreeterClient) ChangeAccess(ctx context.Context, in *ChangeAccessRequest, opts ...grpc.CallOption) (*ChangeAccessResponse, error) {
	out := new(ChangeAccessResponse)
	err := c.cc.Invoke(ctx, "/access.AccessGreeter/ChangeAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessGreeterServer is the server API for AccessGreeter service.
// All implementations must embed UnimplementedAccessGreeterServer
// for forward compatibility
type AccessGreeterServer interface {
	CreateAccess(context.Context, *RequestAccess) (*ResponseAccess, error)
	GetAccesses(context.Context, *Empty) (*GetAccessesResponse, error)
	ChangeAccess(context.Context, *ChangeAccessRequest) (*ChangeAccessResponse, error)
	mustEmbedUnimplementedAccessGreeterServer()
}

// UnimplementedAccessGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedAccessGreeterServer struct {
}

func (UnimplementedAccessGreeterServer) CreateAccess(context.Context, *RequestAccess) (*ResponseAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccess not implemented")
}
func (UnimplementedAccessGreeterServer) GetAccesses(context.Context, *Empty) (*GetAccessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccesses not implemented")
}
func (UnimplementedAccessGreeterServer) ChangeAccess(context.Context, *ChangeAccessRequest) (*ChangeAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAccess not implemented")
}
func (UnimplementedAccessGreeterServer) mustEmbedUnimplementedAccessGreeterServer() {}

// UnsafeAccessGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessGreeterServer will
// result in compilation errors.
type UnsafeAccessGreeterServer interface {
	mustEmbedUnimplementedAccessGreeterServer()
}

func RegisterAccessGreeterServer(s grpc.ServiceRegistrar, srv AccessGreeterServer) {
	s.RegisterService(&AccessGreeter_ServiceDesc, srv)
}

func _AccessGreeter_CreateAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAccess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessGreeterServer).CreateAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access.AccessGreeter/CreateAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessGreeterServer).CreateAccess(ctx, req.(*RequestAccess))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessGreeter_GetAccesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessGreeterServer).GetAccesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access.AccessGreeter/GetAccesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessGreeterServer).GetAccesses(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessGreeter_ChangeAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessGreeterServer).ChangeAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access.AccessGreeter/ChangeAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessGreeterServer).ChangeAccess(ctx, req.(*ChangeAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessGreeter_ServiceDesc is the grpc.ServiceDesc for AccessGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "access.AccessGreeter",
	HandlerType: (*AccessGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccess",
			Handler:    _AccessGreeter_CreateAccess_Handler,
		},
		{
			MethodName: "GetAccesses",
			Handler:    _AccessGreeter_GetAccesses_Handler,
		},
		{
			MethodName: "ChangeAccess",
			Handler:    _AccessGreeter_ChangeAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "access.proto",
}
